// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings autom√°ticos para libaries_askar.so
class askar_bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  askar_bindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  askar_bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  void askar_buffer_free(
    SecretBuffer buffer,
  ) {
    return _askar_buffer_free(
      buffer,
    );
  }

  late final _askar_buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SecretBuffer)>>(
          'askar_buffer_free');
  late final _askar_buffer_free =
      _askar_buffer_freePtr.asFunction<void Function(SecretBuffer)>();

  void askar_clear_custom_logger() {
    return _askar_clear_custom_logger();
  }

  late final _askar_clear_custom_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'askar_clear_custom_logger');
  late final _askar_clear_custom_logger =
      _askar_clear_custom_loggerPtr.asFunction<void Function()>();

  int askar_entry_list_count(
    EntryListHandle handle,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _askar_entry_list_count(
      handle,
      count,
    );
  }

  late final _askar_entry_list_countPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(EntryListHandle,
              ffi.Pointer<ffi.Int32>)>>('askar_entry_list_count');
  late final _askar_entry_list_count = _askar_entry_list_countPtr
      .asFunction<int Function(EntryListHandle, ffi.Pointer<ffi.Int32>)>();

  void askar_entry_list_free(
    EntryListHandle handle,
  ) {
    return _askar_entry_list_free(
      handle,
    );
  }

  late final _askar_entry_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EntryListHandle)>>(
          'askar_entry_list_free');
  late final _askar_entry_list_free =
      _askar_entry_list_freePtr.asFunction<void Function(EntryListHandle)>();

  int askar_entry_list_get_category(
    EntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> category,
  ) {
    return _askar_entry_list_get_category(
      handle,
      index,
      category,
    );
  }

  late final _askar_entry_list_get_categoryPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(EntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_entry_list_get_category');
  late final _askar_entry_list_get_category =
      _askar_entry_list_get_categoryPtr.asFunction<
          int Function(
              EntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_entry_list_get_name(
    EntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _askar_entry_list_get_name(
      handle,
      index,
      name,
    );
  }

  late final _askar_entry_list_get_namePtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(EntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_entry_list_get_name');
  late final _askar_entry_list_get_name =
      _askar_entry_list_get_namePtr.asFunction<
          int Function(
              EntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_entry_list_get_tags(
    EntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tags,
  ) {
    return _askar_entry_list_get_tags(
      handle,
      index,
      tags,
    );
  }

  late final _askar_entry_list_get_tagsPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(EntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_entry_list_get_tags');
  late final _askar_entry_list_get_tags =
      _askar_entry_list_get_tagsPtr.asFunction<
          int Function(
              EntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_entry_list_get_value(
    EntryListHandle handle,
    int index,
    ffi.Pointer<SecretBuffer> value,
  ) {
    return _askar_entry_list_get_value(
      handle,
      index,
      value,
    );
  }

  late final _askar_entry_list_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(EntryListHandle, ffi.Int32,
              ffi.Pointer<SecretBuffer>)>>('askar_entry_list_get_value');
  late final _askar_entry_list_get_value =
      _askar_entry_list_get_valuePtr.asFunction<
          int Function(EntryListHandle, int, ffi.Pointer<SecretBuffer>)>();

  int askar_get_current_error(
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_json_p,
  ) {
    return _askar_get_current_error(
      error_json_p,
    );
  }

  late final _askar_get_current_errorPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('askar_get_current_error');
  late final _askar_get_current_error = _askar_get_current_errorPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_aead_decrypt(
    LocalKeyHandle handle,
    ByteBuffer ciphertext,
    ByteBuffer nonce,
    ByteBuffer tag,
    ByteBuffer aad,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_aead_decrypt(
      handle,
      ciphertext,
      nonce,
      tag,
      aad,
      out,
    );
  }

  late final _askar_key_aead_decryptPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              LocalKeyHandle,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ffi.Pointer<SecretBuffer>)>>('askar_key_aead_decrypt');
  late final _askar_key_aead_decrypt = _askar_key_aead_decryptPtr.asFunction<
      int Function(LocalKeyHandle, ByteBuffer, ByteBuffer, ByteBuffer,
          ByteBuffer, ffi.Pointer<SecretBuffer>)>();

  int askar_key_aead_encrypt(
    LocalKeyHandle handle,
    ByteBuffer message,
    ByteBuffer nonce,
    ByteBuffer aad,
    ffi.Pointer<EncryptedBuffer> out,
  ) {
    return _askar_key_aead_encrypt(
      handle,
      message,
      nonce,
      aad,
      out,
    );
  }

  late final _askar_key_aead_encryptPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              LocalKeyHandle,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ffi.Pointer<EncryptedBuffer>)>>('askar_key_aead_encrypt');
  late final _askar_key_aead_encrypt = _askar_key_aead_encryptPtr.asFunction<
      int Function(LocalKeyHandle, ByteBuffer, ByteBuffer, ByteBuffer,
          ffi.Pointer<EncryptedBuffer>)>();

  int askar_key_aead_get_padding(
    LocalKeyHandle handle,
    int msg_len,
    ffi.Pointer<ffi.Int32> out,
  ) {
    return _askar_key_aead_get_padding(
      handle,
      msg_len,
      out,
    );
  }

  late final _askar_key_aead_get_paddingPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, ffi.Int64,
              ffi.Pointer<ffi.Int32>)>>('askar_key_aead_get_padding');
  late final _askar_key_aead_get_padding = _askar_key_aead_get_paddingPtr
      .asFunction<int Function(LocalKeyHandle, int, ffi.Pointer<ffi.Int32>)>();

  int askar_key_aead_get_params(
    LocalKeyHandle handle,
    ffi.Pointer<AeadParams> out,
  ) {
    return _askar_key_aead_get_params(
      handle,
      out,
    );
  }

  late final _askar_key_aead_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<AeadParams>)>>('askar_key_aead_get_params');
  late final _askar_key_aead_get_params = _askar_key_aead_get_paramsPtr
      .asFunction<int Function(LocalKeyHandle, ffi.Pointer<AeadParams>)>();

  int askar_key_aead_random_nonce(
    LocalKeyHandle handle,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_aead_random_nonce(
      handle,
      out,
    );
  }

  late final _askar_key_aead_random_noncePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<SecretBuffer>)>>('askar_key_aead_random_nonce');
  late final _askar_key_aead_random_nonce = _askar_key_aead_random_noncePtr
      .asFunction<int Function(LocalKeyHandle, ffi.Pointer<SecretBuffer>)>();

  int askar_key_convert(
    LocalKeyHandle handle,
    FfiStr alg,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_convert(
      handle,
      alg,
      out,
    );
  }

  late final _askar_key_convertPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, FfiStr,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_convert');
  late final _askar_key_convert = _askar_key_convertPtr.asFunction<
      int Function(LocalKeyHandle, FfiStr, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_crypto_box(
    LocalKeyHandle recip_key,
    LocalKeyHandle sender_key,
    ByteBuffer message,
    ByteBuffer nonce,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_crypto_box(
      recip_key,
      sender_key,
      message,
      nonce,
      out,
    );
  }

  late final _askar_key_crypto_boxPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, LocalKeyHandle, ByteBuffer,
              ByteBuffer, ffi.Pointer<SecretBuffer>)>>('askar_key_crypto_box');
  late final _askar_key_crypto_box = _askar_key_crypto_boxPtr.asFunction<
      int Function(LocalKeyHandle, LocalKeyHandle, ByteBuffer, ByteBuffer,
          ffi.Pointer<SecretBuffer>)>();

  int askar_key_crypto_box_open(
    LocalKeyHandle recip_key,
    LocalKeyHandle sender_key,
    ByteBuffer message,
    ByteBuffer nonce,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_crypto_box_open(
      recip_key,
      sender_key,
      message,
      nonce,
      out,
    );
  }

  late final _askar_key_crypto_box_openPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              LocalKeyHandle,
              LocalKeyHandle,
              ByteBuffer,
              ByteBuffer,
              ffi.Pointer<SecretBuffer>)>>('askar_key_crypto_box_open');
  late final _askar_key_crypto_box_open =
      _askar_key_crypto_box_openPtr.asFunction<
          int Function(LocalKeyHandle, LocalKeyHandle, ByteBuffer, ByteBuffer,
              ffi.Pointer<SecretBuffer>)>();

  int askar_key_crypto_box_random_nonce(
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_crypto_box_random_nonce(
      out,
    );
  }

  late final _askar_key_crypto_box_random_noncePtr = _lookup<
          ffi.NativeFunction<ErrorCode1 Function(ffi.Pointer<SecretBuffer>)>>(
      'askar_key_crypto_box_random_nonce');
  late final _askar_key_crypto_box_random_nonce =
      _askar_key_crypto_box_random_noncePtr
          .asFunction<int Function(ffi.Pointer<SecretBuffer>)>();

  int askar_key_crypto_box_seal(
    LocalKeyHandle handle,
    ByteBuffer message,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_crypto_box_seal(
      handle,
      message,
      out,
    );
  }

  late final _askar_key_crypto_box_sealPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, ByteBuffer,
              ffi.Pointer<SecretBuffer>)>>('askar_key_crypto_box_seal');
  late final _askar_key_crypto_box_seal =
      _askar_key_crypto_box_sealPtr.asFunction<
          int Function(
              LocalKeyHandle, ByteBuffer, ffi.Pointer<SecretBuffer>)>();

  int askar_key_crypto_box_seal_open(
    LocalKeyHandle handle,
    ByteBuffer ciphertext,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_crypto_box_seal_open(
      handle,
      ciphertext,
      out,
    );
  }

  late final _askar_key_crypto_box_seal_openPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, ByteBuffer,
              ffi.Pointer<SecretBuffer>)>>('askar_key_crypto_box_seal_open');
  late final _askar_key_crypto_box_seal_open =
      _askar_key_crypto_box_seal_openPtr.asFunction<
          int Function(
              LocalKeyHandle, ByteBuffer, ffi.Pointer<SecretBuffer>)>();

  int askar_key_derive_ecdh_1pu(
    FfiStr alg,
    LocalKeyHandle ephem_key,
    LocalKeyHandle sender_key,
    LocalKeyHandle recip_key,
    ByteBuffer alg_id,
    ByteBuffer apu,
    ByteBuffer apv,
    ByteBuffer cc_tag,
    int receive,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_derive_ecdh_1pu(
      alg,
      ephem_key,
      sender_key,
      recip_key,
      alg_id,
      apu,
      apv,
      cc_tag,
      receive,
      out,
    );
  }

  late final _askar_key_derive_ecdh_1puPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              FfiStr,
              LocalKeyHandle,
              LocalKeyHandle,
              LocalKeyHandle,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ffi.Int8,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_derive_ecdh_1pu');
  late final _askar_key_derive_ecdh_1pu =
      _askar_key_derive_ecdh_1puPtr.asFunction<
          int Function(
              FfiStr,
              LocalKeyHandle,
              LocalKeyHandle,
              LocalKeyHandle,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              int,
              ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_derive_ecdh_es(
    FfiStr alg,
    LocalKeyHandle ephem_key,
    LocalKeyHandle recip_key,
    ByteBuffer alg_id,
    ByteBuffer apu,
    ByteBuffer apv,
    int receive,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_derive_ecdh_es(
      alg,
      ephem_key,
      recip_key,
      alg_id,
      apu,
      apv,
      receive,
      out,
    );
  }

  late final _askar_key_derive_ecdh_esPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              FfiStr,
              LocalKeyHandle,
              LocalKeyHandle,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ffi.Int8,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_derive_ecdh_es');
  late final _askar_key_derive_ecdh_es =
      _askar_key_derive_ecdh_esPtr.asFunction<
          int Function(FfiStr, LocalKeyHandle, LocalKeyHandle, ByteBuffer,
              ByteBuffer, ByteBuffer, int, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_entry_list_count(
    KeyEntryListHandle handle,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _askar_key_entry_list_count(
      handle,
      count,
    );
  }

  late final _askar_key_entry_list_countPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(KeyEntryListHandle,
              ffi.Pointer<ffi.Int32>)>>('askar_key_entry_list_count');
  late final _askar_key_entry_list_count = _askar_key_entry_list_countPtr
      .asFunction<int Function(KeyEntryListHandle, ffi.Pointer<ffi.Int32>)>();

  void askar_key_entry_list_free(
    KeyEntryListHandle handle,
  ) {
    return _askar_key_entry_list_free(
      handle,
    );
  }

  late final _askar_key_entry_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KeyEntryListHandle)>>(
          'askar_key_entry_list_free');
  late final _askar_key_entry_list_free = _askar_key_entry_list_freePtr
      .asFunction<void Function(KeyEntryListHandle)>();

  int askar_key_entry_list_get_algorithm(
    KeyEntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> alg,
  ) {
    return _askar_key_entry_list_get_algorithm(
      handle,
      index,
      alg,
    );
  }

  late final _askar_key_entry_list_get_algorithmPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(KeyEntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_key_entry_list_get_algorithm');
  late final _askar_key_entry_list_get_algorithm =
      _askar_key_entry_list_get_algorithmPtr.asFunction<
          int Function(
              KeyEntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_entry_list_get_metadata(
    KeyEntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> metadata,
  ) {
    return _askar_key_entry_list_get_metadata(
      handle,
      index,
      metadata,
    );
  }

  late final _askar_key_entry_list_get_metadataPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(KeyEntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_key_entry_list_get_metadata');
  late final _askar_key_entry_list_get_metadata =
      _askar_key_entry_list_get_metadataPtr.asFunction<
          int Function(
              KeyEntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_entry_list_get_name(
    KeyEntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _askar_key_entry_list_get_name(
      handle,
      index,
      name,
    );
  }

  late final _askar_key_entry_list_get_namePtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(KeyEntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_key_entry_list_get_name');
  late final _askar_key_entry_list_get_name =
      _askar_key_entry_list_get_namePtr.asFunction<
          int Function(
              KeyEntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_entry_list_get_tags(
    KeyEntryListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tags,
  ) {
    return _askar_key_entry_list_get_tags(
      handle,
      index,
      tags,
    );
  }

  late final _askar_key_entry_list_get_tagsPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(KeyEntryListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_key_entry_list_get_tags');
  late final _askar_key_entry_list_get_tags =
      _askar_key_entry_list_get_tagsPtr.asFunction<
          int Function(
              KeyEntryListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_entry_list_load_local(
    KeyEntryListHandle handle,
    int index,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_entry_list_load_local(
      handle,
      index,
      out,
    );
  }

  late final _askar_key_entry_list_load_localPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(KeyEntryListHandle, ffi.Int32,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_entry_list_load_local');
  late final _askar_key_entry_list_load_local =
      _askar_key_entry_list_load_localPtr.asFunction<
          int Function(KeyEntryListHandle, int, ffi.Pointer<LocalKeyHandle>)>();

  void askar_key_free(
    LocalKeyHandle handle,
  ) {
    return _askar_key_free(
      handle,
    );
  }

  late final _askar_key_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LocalKeyHandle)>>(
          'askar_key_free');
  late final _askar_key_free =
      _askar_key_freePtr.asFunction<void Function(LocalKeyHandle)>();

  int askar_key_from_jwk(
    ByteBuffer jwk,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_from_jwk(
      jwk,
      out,
    );
  }

  late final _askar_key_from_jwkPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              ByteBuffer, ffi.Pointer<LocalKeyHandle>)>>('askar_key_from_jwk');
  late final _askar_key_from_jwk = _askar_key_from_jwkPtr
      .asFunction<int Function(ByteBuffer, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_from_key_exchange(
    FfiStr alg,
    LocalKeyHandle sk_handle,
    LocalKeyHandle pk_handle,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_from_key_exchange(
      alg,
      sk_handle,
      pk_handle,
      out,
    );
  }

  late final _askar_key_from_key_exchangePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(FfiStr, LocalKeyHandle, LocalKeyHandle,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_from_key_exchange');
  late final _askar_key_from_key_exchange =
      _askar_key_from_key_exchangePtr.asFunction<
          int Function(FfiStr, LocalKeyHandle, LocalKeyHandle,
              ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_from_public_bytes(
    FfiStr alg,
    ByteBuffer public_,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_from_public_bytes(
      alg,
      public_,
      out,
    );
  }

  late final _askar_key_from_public_bytesPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(FfiStr, ByteBuffer,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_from_public_bytes');
  late final _askar_key_from_public_bytes =
      _askar_key_from_public_bytesPtr.asFunction<
          int Function(FfiStr, ByteBuffer, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_from_secret_bytes(
    FfiStr alg,
    ByteBuffer secret,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_from_secret_bytes(
      alg,
      secret,
      out,
    );
  }

  late final _askar_key_from_secret_bytesPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(FfiStr, ByteBuffer,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_from_secret_bytes');
  late final _askar_key_from_secret_bytes =
      _askar_key_from_secret_bytesPtr.asFunction<
          int Function(FfiStr, ByteBuffer, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_from_seed(
    FfiStr alg,
    ByteBuffer seed,
    FfiStr method,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_from_seed(
      alg,
      seed,
      method,
      out,
    );
  }

  late final _askar_key_from_seedPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(FfiStr, ByteBuffer, FfiStr,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_from_seed');
  late final _askar_key_from_seed = _askar_key_from_seedPtr.asFunction<
      int Function(FfiStr, ByteBuffer, FfiStr, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_generate(
    FfiStr alg,
    FfiStr key_backend,
    int ephemeral,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_generate(
      alg,
      key_backend,
      ephemeral,
      out,
    );
  }

  late final _askar_key_generatePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(FfiStr, FfiStr, ffi.Int8,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_generate');
  late final _askar_key_generate = _askar_key_generatePtr.asFunction<
      int Function(FfiStr, FfiStr, int, ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_get_algorithm(
    LocalKeyHandle handle,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _askar_key_get_algorithm(
      handle,
      out,
    );
  }

  late final _askar_key_get_algorithmPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('askar_key_get_algorithm');
  late final _askar_key_get_algorithm = _askar_key_get_algorithmPtr.asFunction<
      int Function(LocalKeyHandle, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_get_ephemeral(
    LocalKeyHandle handle,
    ffi.Pointer<ffi.Int8> out,
  ) {
    return _askar_key_get_ephemeral(
      handle,
      out,
    );
  }

  late final _askar_key_get_ephemeralPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<ffi.Int8>)>>('askar_key_get_ephemeral');
  late final _askar_key_get_ephemeral = _askar_key_get_ephemeralPtr
      .asFunction<int Function(LocalKeyHandle, ffi.Pointer<ffi.Int8>)>();

  int askar_key_get_jwk_public(
    LocalKeyHandle handle,
    FfiStr alg,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _askar_key_get_jwk_public(
      handle,
      alg,
      out,
    );
  }

  late final _askar_key_get_jwk_publicPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, FfiStr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('askar_key_get_jwk_public');
  late final _askar_key_get_jwk_public =
      _askar_key_get_jwk_publicPtr.asFunction<
          int Function(
              LocalKeyHandle, FfiStr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_get_jwk_secret(
    LocalKeyHandle handle,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_get_jwk_secret(
      handle,
      out,
    );
  }

  late final _askar_key_get_jwk_secretPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<SecretBuffer>)>>('askar_key_get_jwk_secret');
  late final _askar_key_get_jwk_secret = _askar_key_get_jwk_secretPtr
      .asFunction<int Function(LocalKeyHandle, ffi.Pointer<SecretBuffer>)>();

  int askar_key_get_jwk_thumbprint(
    LocalKeyHandle handle,
    FfiStr alg,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _askar_key_get_jwk_thumbprint(
      handle,
      alg,
      out,
    );
  }

  late final _askar_key_get_jwk_thumbprintPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(
                  LocalKeyHandle, FfiStr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_key_get_jwk_thumbprint');
  late final _askar_key_get_jwk_thumbprint =
      _askar_key_get_jwk_thumbprintPtr.asFunction<
          int Function(
              LocalKeyHandle, FfiStr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_key_get_public_bytes(
    LocalKeyHandle handle,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_get_public_bytes(
      handle,
      out,
    );
  }

  late final _askar_key_get_public_bytesPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<SecretBuffer>)>>('askar_key_get_public_bytes');
  late final _askar_key_get_public_bytes = _askar_key_get_public_bytesPtr
      .asFunction<int Function(LocalKeyHandle, ffi.Pointer<SecretBuffer>)>();

  int askar_key_get_secret_bytes(
    LocalKeyHandle handle,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_get_secret_bytes(
      handle,
      out,
    );
  }

  late final _askar_key_get_secret_bytesPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle,
              ffi.Pointer<SecretBuffer>)>>('askar_key_get_secret_bytes');
  late final _askar_key_get_secret_bytes = _askar_key_get_secret_bytesPtr
      .asFunction<int Function(LocalKeyHandle, ffi.Pointer<SecretBuffer>)>();

  int skar_key_get_supported_backends(
    ffi.Pointer<StringListHandle> out,
  ) {
    return _skar_key_get_supported_backends(
      out,
    );
  }

  late final _skar_key_get_supported_backendsPtr = _lookup<
          ffi
          .NativeFunction<ErrorCode1 Function(ffi.Pointer<StringListHandle>)>>(
      'skar_key_get_supported_backends');
  late final _skar_key_get_supported_backends =
      _skar_key_get_supported_backendsPtr
          .asFunction<int Function(ffi.Pointer<StringListHandle>)>();

  int askar_key_sign_message(
    LocalKeyHandle handle,
    ByteBuffer message,
    FfiStr sig_type,
    ffi.Pointer<SecretBuffer> out,
  ) {
    return _askar_key_sign_message(
      handle,
      message,
      sig_type,
      out,
    );
  }

  late final _askar_key_sign_messagePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, ByteBuffer, FfiStr,
              ffi.Pointer<SecretBuffer>)>>('askar_key_sign_message');
  late final _askar_key_sign_message = _askar_key_sign_messagePtr.asFunction<
      int Function(
          LocalKeyHandle, ByteBuffer, FfiStr, ffi.Pointer<SecretBuffer>)>();

  int askar_key_unwrap_key(
    LocalKeyHandle handle,
    FfiStr alg,
    ByteBuffer ciphertext,
    ByteBuffer nonce,
    ByteBuffer tag,
    ffi.Pointer<LocalKeyHandle> out,
  ) {
    return _askar_key_unwrap_key(
      handle,
      alg,
      ciphertext,
      nonce,
      tag,
      out,
    );
  }

  late final _askar_key_unwrap_keyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              LocalKeyHandle,
              FfiStr,
              ByteBuffer,
              ByteBuffer,
              ByteBuffer,
              ffi.Pointer<LocalKeyHandle>)>>('askar_key_unwrap_key');
  late final _askar_key_unwrap_key = _askar_key_unwrap_keyPtr.asFunction<
      int Function(LocalKeyHandle, FfiStr, ByteBuffer, ByteBuffer, ByteBuffer,
          ffi.Pointer<LocalKeyHandle>)>();

  int askar_key_verify_signature(
    LocalKeyHandle handle,
    ByteBuffer message,
    ByteBuffer signature,
    FfiStr sig_type,
    ffi.Pointer<ffi.Int8> out,
  ) {
    return _askar_key_verify_signature(
      handle,
      message,
      signature,
      sig_type,
      out,
    );
  }

  late final _askar_key_verify_signaturePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, ByteBuffer, ByteBuffer, FfiStr,
              ffi.Pointer<ffi.Int8>)>>('askar_key_verify_signature');
  late final _askar_key_verify_signature =
      _askar_key_verify_signaturePtr.asFunction<
          int Function(LocalKeyHandle, ByteBuffer, ByteBuffer, FfiStr,
              ffi.Pointer<ffi.Int8>)>();

  int askar_key_wrap_key(
    LocalKeyHandle handle,
    LocalKeyHandle other,
    ByteBuffer nonce,
    ffi.Pointer<EncryptedBuffer> out,
  ) {
    return _askar_key_wrap_key(
      handle,
      other,
      nonce,
      out,
    );
  }

  late final _askar_key_wrap_keyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(LocalKeyHandle, LocalKeyHandle, ByteBuffer,
              ffi.Pointer<EncryptedBuffer>)>>('askar_key_wrap_key');
  late final _askar_key_wrap_key = _askar_key_wrap_keyPtr.asFunction<
      int Function(LocalKeyHandle, LocalKeyHandle, ByteBuffer,
          ffi.Pointer<EncryptedBuffer>)>();

  /// Migrate an sqlite wallet from an indy-sdk structure to an aries-askar structure.
  /// It is important to note that this does not do any post-processing. If the record values, tags,
  /// names, etc. have changed, it must be processed manually afterwards. This script does the following:
  ///
  /// 1. Create and rename the required tables
  /// 2. Fetch the indy key from the wallet
  /// 3. Create a new configuration
  /// 4. Initialize a profile
  /// 5. Update the items from the indy-sdk
  /// 6. Clean up (drop tables and add a version of "1")
  int askar_migrate_indy_sdk(
    FfiStr spec_uri,
    FfiStr wallet_name,
    FfiStr wallet_key,
    FfiStr kdf_level,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_migrate_indy_sdk(
      spec_uri,
      wallet_name,
      wallet_key,
      kdf_level,
      cb,
      cb_id,
    );
  }

  late final _askar_migrate_indy_sdkPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              FfiStr,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_migrate_indy_sdk');
  late final _askar_migrate_indy_sdk = _askar_migrate_indy_sdkPtr.asFunction<
      int Function(
          FfiStr,
          FfiStr,
          FfiStr,
          FfiStr,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
          int)>();

  int askar_scan_free(
    int handle,
  ) {
    return _askar_scan_free(
      handle,
    );
  }

  late final _askar_scan_freePtr =
      _lookup<ffi.NativeFunction<ErrorCode1 Function(ScanHandle)>>(
          'askar_scan_free');
  late final _askar_scan_free =
      _askar_scan_freePtr.asFunction<int Function(int)>();

  int askar_scan_next(
    int handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, EntryListHandle results)>>
        cb,
    int cb_id,
  ) {
    return _askar_scan_next(
      handle,
      cb,
      cb_id,
    );
  }

  late final _askar_scan_nextPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              ScanHandle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          EntryListHandle results)>>,
              CallbackId)>>('askar_scan_next');
  late final _askar_scan_next = _askar_scan_nextPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                      EntryListHandle results)>>,
          int)>();

  int askar_scan_start(
    int handle,
    FfiStr profile,
    FfiStr category,
    FfiStr tag_filter,
    int offset,
    int limit,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, ScanHandle handle)>>
        cb,
    int cb_id,
  ) {
    return _askar_scan_start(
      handle,
      profile,
      category,
      tag_filter,
      offset,
      limit,
      cb,
      cb_id,
    );
  }

  late final _askar_scan_startPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Int64,
              ffi.Int64,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ScanHandle handle)>>,
              CallbackId)>>('askar_scan_start');
  late final _askar_scan_start = _askar_scan_startPtr.asFunction<
      int Function(
          int,
          FfiStr,
          FfiStr,
          FfiStr,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CallbackId cb_id, ErrorCode1 err, ScanHandle handle)>>,
          int)>();

  int askar_session_close(
    int handle,
    int commit,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_close(
      handle,
      commit,
      cb,
      cb_id,
    );
  }

  late final _askar_session_closePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_session_close');
  late final _askar_session_close = _askar_session_closePtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
          int)>();

  int askar_session_count(
    int handle,
    FfiStr category,
    FfiStr tag_filter,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, ffi.Int64 count)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_count(
      handle,
      category,
      tag_filter,
      cb,
      cb_id,
    );
  }

  late final _askar_session_countPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          CallbackId cb_id, ErrorCode1 err, ffi.Int64 count)>>,
              CallbackId)>>('askar_session_count');
  late final _askar_session_count = _askar_session_countPtr.asFunction<
      int Function(
          int,
          FfiStr,
          FfiStr,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CallbackId cb_id, ErrorCode1 err, ffi.Int64 count)>>,
          int)>();

  int askar_session_fetch(
    int handle,
    FfiStr category,
    FfiStr name,
    int for_update,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, EntryListHandle results)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_fetch(
      handle,
      category,
      name,
      for_update,
      cb,
      cb_id,
    );
  }

  late final _askar_session_fetchPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              FfiStr,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          EntryListHandle results)>>,
              CallbackId)>>('askar_session_fetch');
  late final _askar_session_fetch = _askar_session_fetchPtr.asFunction<
      int Function(
          int,
          FfiStr,
          FfiStr,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                      EntryListHandle results)>>,
          int)>();

  int askar_session_fetch_all(
    int handle,
    FfiStr category,
    FfiStr tag_filter,
    int limit,
    int for_update,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, EntryListHandle results)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_fetch_all(
      handle,
      category,
      tag_filter,
      limit,
      for_update,
      cb,
      cb_id,
    );
  }

  late final _askar_session_fetch_allPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              FfiStr,
              ffi.Int64,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          EntryListHandle results)>>,
              CallbackId)>>('askar_session_fetch_all');
  late final _askar_session_fetch_all = _askar_session_fetch_allPtr.asFunction<
      int Function(
          int,
          FfiStr,
          FfiStr,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                      EntryListHandle results)>>,
          int)>();

  int askar_session_fetch_all_keys(
    int handle,
    FfiStr alg,
    FfiStr thumbprint,
    FfiStr tag_filter,
    int limit,
    int for_update,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                    KeyEntryListHandle results)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_fetch_all_keys(
      handle,
      alg,
      thumbprint,
      tag_filter,
      limit,
      for_update,
      cb,
      cb_id,
    );
  }

  late final _askar_session_fetch_all_keysPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Int64,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          KeyEntryListHandle results)>>,
              CallbackId)>>('askar_session_fetch_all_keys');
  late final _askar_session_fetch_all_keys =
      _askar_session_fetch_all_keysPtr.asFunction<
          int Function(
              int,
              FfiStr,
              FfiStr,
              FfiStr,
              int,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          KeyEntryListHandle results)>>,
              int)>();

  int askar_session_fetch_key(
    int handle,
    FfiStr name,
    int for_update,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                    KeyEntryListHandle results)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_fetch_key(
      handle,
      name,
      for_update,
      cb,
      cb_id,
    );
  }

  late final _askar_session_fetch_keyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          KeyEntryListHandle results)>>,
              CallbackId)>>('askar_session_fetch_key');
  late final _askar_session_fetch_key = _askar_session_fetch_keyPtr.asFunction<
      int Function(
          int,
          FfiStr,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                      KeyEntryListHandle results)>>,
          int)>();

  int askar_session_insert_key(
    int handle,
    LocalKeyHandle key_handle,
    FfiStr name,
    FfiStr metadata,
    FfiStr tags,
    int expiry_ms,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_insert_key(
      handle,
      key_handle,
      name,
      metadata,
      tags,
      expiry_ms,
      cb,
      cb_id,
    );
  }

  late final _askar_session_insert_keyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              LocalKeyHandle,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Int64,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_session_insert_key');
  late final _askar_session_insert_key =
      _askar_session_insert_keyPtr.asFunction<
          int Function(
              int,
              LocalKeyHandle,
              FfiStr,
              FfiStr,
              FfiStr,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              int)>();

  int askar_session_remove_all(
    int handle,
    FfiStr category,
    FfiStr tag_filter,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, ffi.Int64 removed)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_remove_all(
      handle,
      category,
      tag_filter,
      cb,
      cb_id,
    );
  }

  late final _askar_session_remove_allPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Int64 removed)>>,
              CallbackId)>>('askar_session_remove_all');
  late final _askar_session_remove_all =
      _askar_session_remove_allPtr.asFunction<
          int Function(
              int,
              FfiStr,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Int64 removed)>>,
              int)>();

  int askar_session_remove_key(
    int handle,
    FfiStr name,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_remove_key(
      handle,
      name,
      cb,
      cb_id,
    );
  }

  late final _askar_session_remove_keyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_session_remove_key');
  late final _askar_session_remove_key =
      _askar_session_remove_keyPtr.asFunction<
          int Function(
              int,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              int)>();

  int askar_session_start(
    int handle,
    FfiStr profile,
    int as_transaction,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, SessionHandle handle)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_start(
      handle,
      profile,
      as_transaction,
      cb,
      cb_id,
    );
  }

  late final _askar_session_startPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          SessionHandle handle)>>,
              CallbackId)>>('askar_session_start');
  late final _askar_session_start = _askar_session_startPtr.asFunction<
      int Function(
          int,
          FfiStr,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CallbackId cb_id, ErrorCode1 err, SessionHandle handle)>>,
          int)>();

  int askar_session_update(
    int handle,
    int operation,
    FfiStr category,
    FfiStr name,
    ByteBuffer value,
    FfiStr tags,
    int expiry_ms,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_update(
      handle,
      operation,
      category,
      name,
      value,
      tags,
      expiry_ms,
      cb,
      cb_id,
    );
  }

  late final _askar_session_updatePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              ffi.Int8,
              FfiStr,
              FfiStr,
              ByteBuffer,
              FfiStr,
              ffi.Int64,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_session_update');
  late final _askar_session_update = _askar_session_updatePtr.asFunction<
      int Function(
          int,
          int,
          FfiStr,
          FfiStr,
          ByteBuffer,
          FfiStr,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
          int)>();

  int askar_session_update_key(
    int handle,
    FfiStr name,
    FfiStr metadata,
    FfiStr tags,
    int expiry_ms,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_session_update_key(
      handle,
      name,
      metadata,
      tags,
      expiry_ms,
      cb,
      cb_id,
    );
  }

  late final _askar_session_update_keyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              SessionHandle,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Int64,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_session_update_key');
  late final _askar_session_update_key =
      _askar_session_update_keyPtr.asFunction<
          int Function(
              int,
              FfiStr,
              FfiStr,
              FfiStr,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              int)>();

  int askar_set_default_logger() {
    return _askar_set_default_logger();
  }

  late final _askar_set_default_loggerPtr =
      _lookup<ffi.NativeFunction<ErrorCode1 Function()>>(
          'askar_set_default_logger');
  late final _askar_set_default_logger =
      _askar_set_default_loggerPtr.asFunction<int Function()>();

  int askar_set_max_log_level(
    int max_level,
  ) {
    return _askar_set_max_log_level(
      max_level,
    );
  }

  late final _askar_set_max_log_levelPtr =
      _lookup<ffi.NativeFunction<ErrorCode1 Function(ffi.Int32)>>(
          'askar_set_max_log_level');
  late final _askar_set_max_log_level =
      _askar_set_max_log_levelPtr.asFunction<int Function(int)>();

  int askar_store_close(
    int handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_close(
      handle,
      cb,
      cb_id,
    );
  }

  late final _askar_store_closePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_store_close');
  late final _askar_store_close = _askar_store_closePtr.asFunction<
      int Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
          int)>();

  int askar_store_copy(
    int handle,
    FfiStr target_uri,
    FfiStr key_method,
    FfiStr pass_key,
    int recreate,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, StoreHandle handle)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_copy(
      handle,
      target_uri,
      key_method,
      pass_key,
      recreate,
      cb,
      cb_id,
    );
  }

  late final _askar_store_copyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          StoreHandle handle)>>,
              CallbackId)>>('askar_store_copy');
  late final _askar_store_copy = _askar_store_copyPtr.asFunction<
      int Function(
          int,
          FfiStr,
          FfiStr,
          FfiStr,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CallbackId cb_id, ErrorCode1 err, StoreHandle handle)>>,
          int)>();

  int askar_store_create_profile(
    int handle,
    FfiStr profile,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                    ffi.Pointer<ffi.Char> result_p)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_create_profile(
      handle,
      profile,
      cb,
      cb_id,
    );
  }

  late final _askar_store_create_profilePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Pointer<ffi.Char> result_p)>>,
              CallbackId)>>('askar_store_create_profile');
  late final _askar_store_create_profile =
      _askar_store_create_profilePtr.asFunction<
          int Function(
              int,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Pointer<ffi.Char> result_p)>>,
              int)>();

  int askar_store_generate_raw_key(
    ByteBuffer seed,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out,
  ) {
    return _askar_store_generate_raw_key(
      seed,
      out,
    );
  }

  late final _askar_store_generate_raw_keyPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(
                  ByteBuffer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_store_generate_raw_key');
  late final _askar_store_generate_raw_key =
      _askar_store_generate_raw_keyPtr.asFunction<
          int Function(ByteBuffer, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int askar_store_get_default_profile(
    int handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                    ffi.Pointer<ffi.Char> profile)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_get_default_profile(
      handle,
      cb,
      cb_id,
    );
  }

  late final _askar_store_get_default_profilePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Pointer<ffi.Char> profile)>>,
              CallbackId)>>('askar_store_get_default_profile');
  late final _askar_store_get_default_profile =
      _askar_store_get_default_profilePtr.asFunction<
          int Function(
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Pointer<ffi.Char> profile)>>,
              int)>();

  int askar_store_get_profile_name(
    int handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                    ffi.Pointer<ffi.Char> name)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_get_profile_name(
      handle,
      cb,
      cb_id,
    );
  }

  late final _askar_store_get_profile_namePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Pointer<ffi.Char> name)>>,
              CallbackId)>>('askar_store_get_profile_name');
  late final _askar_store_get_profile_name =
      _askar_store_get_profile_namePtr.asFunction<
          int Function(
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          ffi.Pointer<ffi.Char> name)>>,
              int)>();

  int askar_store_list_profiles(
    int handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                    StringListHandle results)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_list_profiles(
      handle,
      cb,
      cb_id,
    );
  }

  late final _askar_store_list_profilesPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          StringListHandle results)>>,
              CallbackId)>>('askar_store_list_profiles');
  late final _askar_store_list_profiles =
      _askar_store_list_profilesPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          StringListHandle results)>>,
              int)>();

  int askar_store_open(
    FfiStr spec_uri,
    FfiStr key_method,
    FfiStr pass_key,
    FfiStr profile,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, StoreHandle handle)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_open(
      spec_uri,
      key_method,
      pass_key,
      profile,
      cb,
      cb_id,
    );
  }

  late final _askar_store_openPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              FfiStr,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          StoreHandle handle)>>,
              CallbackId)>>('askar_store_open');
  late final _askar_store_open = _askar_store_openPtr.asFunction<
      int Function(
          FfiStr,
          FfiStr,
          FfiStr,
          FfiStr,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CallbackId cb_id, ErrorCode1 err, StoreHandle handle)>>,
          int)>();

  int askar_store_provision(
    FfiStr spec_uri,
    FfiStr key_method,
    FfiStr pass_key,
    FfiStr profile,
    int recreate,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, StoreHandle handle)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_provision(
      spec_uri,
      key_method,
      pass_key,
      profile,
      recreate,
      cb,
      cb_id,
    );
  }

  late final _askar_store_provisionPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              FfiStr,
              FfiStr,
              FfiStr,
              FfiStr,
              ffi.Int8,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err,
                          StoreHandle handle)>>,
              CallbackId)>>('askar_store_provision');
  late final _askar_store_provision = _askar_store_provisionPtr.asFunction<
      int Function(
          FfiStr,
          FfiStr,
          FfiStr,
          FfiStr,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      CallbackId cb_id, ErrorCode1 err, StoreHandle handle)>>,
          int)>();

  int askar_store_rekey(
    int handle,
    FfiStr key_method,
    FfiStr pass_key,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_rekey(
      handle,
      key_method,
      pass_key,
      cb,
      cb_id,
    );
  }

  late final _askar_store_rekeyPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_store_rekey');
  late final _askar_store_rekey = _askar_store_rekeyPtr.asFunction<
      int Function(
          int,
          FfiStr,
          FfiStr,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
          int)>();

  int askar_store_remove(
    FfiStr spec_uri,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId, ErrorCode1, ffi.Int8)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_remove(
      spec_uri,
      cb,
      cb_id,
    );
  }

  late final _askar_store_removePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId, ErrorCode1, ffi.Int8)>>,
              CallbackId)>>('askar_store_remove');
  late final _askar_store_remove = _askar_store_removePtr.asFunction<
      int Function(
          FfiStr,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CallbackId, ErrorCode1, ffi.Int8)>>,
          int)>();

  int askar_store_remove_profile(
    int handle,
    FfiStr profile,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    CallbackId cb_id, ErrorCode1 err, ffi.Int8 removed)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_remove_profile(
      handle,
      profile,
      cb,
      cb_id,
    );
  }

  late final _askar_store_remove_profilePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          CallbackId cb_id, ErrorCode1 err, ffi.Int8 removed)>>,
              CallbackId)>>('askar_store_remove_profile');
  late final _askar_store_remove_profile =
      _askar_store_remove_profilePtr.asFunction<
          int Function(
              int,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          CallbackId cb_id, ErrorCode1 err, ffi.Int8 removed)>>,
              int)>();

  int askar_store_set_default_profile(
    int handle,
    FfiStr profile,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>
        cb,
    int cb_id,
  ) {
    return _askar_store_set_default_profile(
      handle,
      profile,
      cb,
      cb_id,
    );
  }

  late final _askar_store_set_default_profilePtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(
              StoreHandle,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              CallbackId)>>('askar_store_set_default_profile');
  late final _askar_store_set_default_profile =
      _askar_store_set_default_profilePtr.asFunction<
          int Function(
              int,
              FfiStr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(CallbackId cb_id, ErrorCode1 err)>>,
              int)>();

  int askar_string_list_count(
    StringListHandle handle,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _askar_string_list_count(
      handle,
      count,
    );
  }

  late final _askar_string_list_countPtr = _lookup<
      ffi.NativeFunction<
          ErrorCode1 Function(StringListHandle,
              ffi.Pointer<ffi.Int32>)>>('askar_string_list_count');
  late final _askar_string_list_count = _askar_string_list_countPtr
      .asFunction<int Function(StringListHandle, ffi.Pointer<ffi.Int32>)>();

  void askar_string_list_free(
    StringListHandle handle,
  ) {
    return _askar_string_list_free(
      handle,
    );
  }

  late final _askar_string_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(StringListHandle)>>(
          'askar_string_list_free');
  late final _askar_string_list_free =
      _askar_string_list_freePtr.asFunction<void Function(StringListHandle)>();

  int askar_string_list_get_item(
    StringListHandle handle,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> item,
  ) {
    return _askar_string_list_get_item(
      handle,
      index,
      item,
    );
  }

  late final _askar_string_list_get_itemPtr = _lookup<
          ffi.NativeFunction<
              ErrorCode1 Function(StringListHandle, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'askar_string_list_get_item');
  late final _askar_string_list_get_item =
      _askar_string_list_get_itemPtr.asFunction<
          int Function(
              StringListHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void askar_terminate() {
    return _askar_terminate();
  }

  late final _askar_terminatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('askar_terminate');
  late final _askar_terminate =
      _askar_terminatePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> askar_version() {
    return _askar_version();
  }

  late final _askar_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'askar_version');
  late final _askar_version =
      _askar_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

class max_align_t extends ffi.Opaque {}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class ErrorCode {
  static const int Success = 0;
  static const int Backend = 1;
  static const int Busy = 2;
  static const int Duplicate = 3;
  static const int Encryption = 4;
  static const int Input = 5;
  static const int NotFound = 6;
  static const int Unexpected = 7;
  static const int Unsupported = 8;
  static const int Custom = 100;
}

class FfiResultList_Entry extends ffi.Opaque {}

class FfiResultList_KeyEntry extends ffi.Opaque {}

class FfiResultList_String extends ffi.Opaque {}

class LocalKey extends ffi.Opaque {}

class Option_EnabledCallback extends ffi.Opaque {}

class Option_FlushCallback extends ffi.Opaque {}

class SecretBuffer extends ffi.Struct {
  @ffi.Int64()
  external int len;

  external ffi.Pointer<ffi.Uint8> data;
}

class ArcHandle_FfiEntryList extends ffi.Struct {
  external ffi.Pointer<FfiEntryList> _0;
}

typedef FfiEntryList = FfiResultList_Entry;

class ArcHandle_LocalKey extends ffi.Struct {
  external ffi.Pointer<LocalKey> _0;
}

/// ByteBuffer is a struct that represents an array of bytes to be sent over the FFI boundaries.
/// There are several cases when you might want to use this, but the primary one for us
/// is for returning protobuf-encoded data to Swift and Java. The type is currently rather
/// limited (implementing almost no functionality), however in the future it may be
/// more expanded.
///
/// ## Caveats
///
/// Note that the order of the fields is `len` (an i64) then `data` (a `*mut u8`), getting
/// this wrong on the other side of the FFI will cause memory corruption and crashes.
/// `i64` is used for the length instead of `u64` and `usize` because JNA has interop
/// issues with both these types.
///
/// ### `Drop` is not implemented
///
/// ByteBuffer does not implement Drop. This is intentional. Memory passed into it will
/// be leaked if it is not explicitly destroyed by calling [`ByteBuffer::destroy`], or
/// [`ByteBuffer::destroy_into_vec`]. This is for two reasons:
///
/// 1. In the future, we may allow it to be used for data that is not managed by
/// the Rust allocator\*, and `ByteBuffer` assuming it's okay to automatically
/// deallocate this data with the Rust allocator.
///
/// 2. Automatically running destructors in unsafe code is a
/// [frequent footgun](https://without.boats/blog/two-memory-bugs-from-ringbahn/)
/// (among many similar issues across many crates).
///
/// Note that calling `destroy` manually is often not needed, as usually you should
/// be passing these to the function defined by [`define_bytebuffer_destructor!`] from
/// the other side of the FFI.
///
/// Because this type is essentially *only* useful in unsafe or FFI code (and because
/// the most common usage pattern does not require manually managing the memory), it
/// does not implement `Drop`.
///
/// \* Note: in the case of multiple Rust shared libraries loaded at the same time,
/// there may be multiple instances of "the Rust allocator" (one per shared library),
/// in which case we're referring to whichever instance is active for the code using
/// the `ByteBuffer`. Note that this doesn't occur on all platforms or build
/// configurations, but treating allocators in different shared libraries as fully
/// independent is always safe.
///
/// ## Layout/fields
///
/// This struct's field are not `pub` (mostly so that we can soundly implement `Send`, but also so
/// that we can verify rust users are constructing them appropriately), the fields, their types, and
/// their order are *very much* a part of the public API of this type. Consumers on the other side
/// of the FFI will need to know its layout.
///
/// If this were a C struct, it would look like
///
/// ```c,no_run
/// struct ByteBuffer {
/// // Note: This should never be negative, but values above
/// // INT64_MAX / i64::MAX are not allowed.
/// int64_t len;
/// // Note: nullable!
/// uint8_t *data;
/// };
/// ```
///
/// In rust, there are two fields, in this order: `len: i64`, and `data: *mut u8`.
///
/// For clarity, the fact that the data pointer is nullable means that `Option<ByteBuffer>` is not
/// the same size as ByteBuffer, and additionally is not FFI-safe (the latter point is not
/// currently guaranteed anyway as of the time of writing this comment).
///
/// ### Description of fields
///
/// `data` is a pointer to an array of `len` bytes. Note that data can be a null pointer and therefore
/// should be checked.
///
/// The bytes array is allocated on the heap and must be freed on it as well. Critically, if there
/// are multiple rust shared libraries using being used in the same application, it *must be freed
/// on the same heap that allocated it*, or you will corrupt both heaps.
///
/// Typically, this object is managed on the other side of the FFI (on the "FFI consumer"), which
/// means you must expose a function to release the resources of `data` which can be done easily
/// using the [`define_bytebuffer_destructor!`] macro provided by this crate.
class ByteBuffer extends ffi.Struct {
  @ffi.Int64()
  external int len;

  external ffi.Pointer<ffi.Uint8> data;
}

class EncryptedBuffer extends ffi.Struct {
  external SecretBuffer buffer;

  @ffi.Int64()
  external int tag_pos;

  @ffi.Int64()
  external int nonce_pos;
}

class AeadParams extends ffi.Struct {
  @ffi.Int32()
  external int nonce_length;

  @ffi.Int32()
  external int tag_length;
}

class ArcHandle_FfiKeyEntryList extends ffi.Struct {
  external ffi.Pointer<FfiKeyEntryList> _0;
}

typedef FfiKeyEntryList = FfiResultList_KeyEntry;

class ArcHandle_FfiStringList extends ffi.Struct {
  external ffi.Pointer<FfiStringList> _0;
}

typedef FfiStringList = FfiResultList_String;
typedef ErrorCode1 = ffi.Int64;
typedef EntryListHandle = ArcHandle_FfiEntryList;
typedef LocalKeyHandle = ArcHandle_LocalKey;

/// `FfiStr<'a>` is a safe (`#[repr(transparent)]`) wrapper around a
/// nul-terminated `*const c_char` (e.g. a C string). Conceptually, it is
/// similar to [`std::ffi::CStr`], except that it may be used in the signatures
/// of extern "C" functions.
///
/// Functions accepting strings should use this instead of accepting a C string
/// directly. This allows us to write those functions using safe code without
/// allowing safe Rust to cause memory unsafety.
///
/// A single function for constructing these from Rust ([`FfiStr::from_raw`])
/// has been provided. Most of the time, this should not be necessary, and users
/// should accept `FfiStr` in the parameter list directly.
///
/// ## Caveats
///
/// An effort has been made to make this struct hard to misuse, however it is
/// still possible, if the `'static` lifetime is manually specified in the
/// struct. E.g.
///
/// ```rust,no_run
/// # use ffi_support::FfiStr;
/// // NEVER DO THIS
/// #[no_mangle]
/// extern "C" fn never_do_this(s: FfiStr<'static>) {
/// // save `s` somewhere, and access it after this
/// // function returns.
/// }
/// ```
///
/// Instead, one of the following patterns should be used:
///
/// ```
/// # use ffi_support::FfiStr;
/// #[no_mangle]
/// extern "C" fn valid_use_1(s: FfiStr<'_>) {
/// // Use of `s` after this function returns is impossible
/// }
/// // Alternative:
/// #[no_mangle]
/// extern "C" fn valid_use_2(s: FfiStr) {
/// // Use of `s` after this function returns is impossible
/// }
/// ```
typedef FfiStr = ffi.Pointer<ffi.Char>;
typedef KeyEntryListHandle = ArcHandle_FfiKeyEntryList;
typedef StringListHandle = ArcHandle_FfiStringList;
typedef CallbackId = ffi.Int64;
typedef ScanHandle = ffi.Size;
typedef StoreHandle = ffi.Size;
typedef SessionHandle = ffi.Size;

const int __GNUC_VA_LIST = 1;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int NULL = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;
